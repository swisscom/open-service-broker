# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  # For building and launching the unit tests we only need a docker image with OpenJDK v8 on it
  build:
    docker:
      - image: circleci/openjdk:8
    environment:
        JAVA_TOOL_OPTIONS: -Xmx1024m
        SPRING_PROFILES_ACTIVE: info,default,extensions,secrets,test
    steps:
      - checkout
      - run: ./gradlew build -x integrationTest -x functionalTest --stacktrace

  # For integration testing we need to start a machine or setup_remote_docker because we need to use docker-compose for
  # having services up to launch the tests against
  integration_test:
    machine:
      image: circleci/classic:latest
    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -Xmx1024m
      SPRING_PROFILES_ACTIVE: info,default,extensions,secrets,test
    steps:
      - checkout
      - run: sudo killall -9 apt-get || true && sudo apt-get update && sudo apt-get install openjdk-8-jdk && sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
      - run: sudo keytool -importkeystore -srckeystore broker/src/functional-test/resources/credhub_client.jks -srcstorepass changeit -destkeystore $(readlink -f /usr/bin/java | sed "s:bin/java::")/lib/security/cacerts -deststorepass changeit
      - run: pushd docker && ./setup_docker.sh ; popd
      - run: ./gradlew clean build -x test -x functionalTest --stacktrace

  # For functional testing we need to start a machine or setup_remote_docker because we need to use docker-compose for
  # having services up to launch the tests against
  functional_test:
    machine:
      image: circleci/classic:latest
    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -Xmx1024m
      SPRING_PROFILES_ACTIVE: info,default,extensions,secrets,test
    steps:
      - checkout
      - run: sudo killall -9 apt-get || true && sudo apt-get update && sudo apt-get install openjdk-8-jdk && sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
      - run: sudo keytool -importkeystore -srckeystore broker/src/functional-test/resources/credhub_client.jks -srcstorepass changeit -destkeystore $(readlink -f /usr/bin/java | sed "s:bin/java::")/lib/security/cacerts -deststorepass changeit
      - run: pushd docker && ./setup_docker.sh ; popd
      - run: ./gradlew clean build -x test -x integrationTest --stacktrace

  # For tagging in the repository tags in the form 'vn.minor+1.0' or in the form 'vn.nn.patch+1'
  tag_release:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c7:88:38:13:95:28:53:68:f3:2e:73:ee:e4:c9:5d:66"
      - run: |
          VERSION_INCREMENTER=$(git log --pretty=%B -1 | cat | grep -q  "feature/"  && echo "incrementMinor" || echo "incrementPatch")
          ./gradlew release -Prelease.versionIncrementer=$VERSION_INCREMENTER -Prelease.customUsername=$GITHUB_USER -Prelease.customPassword=$GITHUB_PASSWORD


  # For publishing build artifacts in MavenCentral and JCenter
  publish:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - run: openssl aes-256-cbc -md md5 -pass pass:$ENCRYPTION_PASSWORD -in secring.gpg.enc -out local.secring.gpg -d
      - run: ./gradlew publish -PbintrayUser=$BINTRAY_USER -PbintrayApiKey=$BINTRAY_API_KEY -PsonatypeUsername=$SONATYPE_USERNAME -PsonatypePassword=$SONATYPE_PASSWORD -PsigningSecretKeyRingFile=/home/circleci/project/local.secring.gpg


workflows:
  version: 2
  build_test_tag_publish:
    jobs:
      - build
      - integration_test:
          requires:
            - build
      - functional_test:
          requires:
            - integration_test
      - tag_release:
          requires:
            - integration_test
            - functional_test
          filters:
            branches:
              only: develop
      - publish:
          requires:
            - integration_test
            - functional_test
            - tag_release
          filters:
            branches:
              only: develop
            tags:
              only: /v.*/

