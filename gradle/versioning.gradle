/**
 * Using Axion release plugin(https://github.com/allegro/axion-release-plugin)
 * <pre>id 'pl.allegro.tech.build.axion-release' version '1.10.0'</pre>
 */
scmVersion {

    repository {
        type = 'git' // type of repository
        directory = project.rootProject.file('./') // repository location
        remote = 'origin' // remote name

        // Authorization: useless in our case because we can't use ssh keys
        // customKey = 'AAasaDDSSD...' or project.file('myKey') // custom authorization key (file or String)
        // customKeyPassword = 'secret' // key password
    }

    // For connecting to remote we should provide ssh keys or you have to call it passing the username an password
    //    gradle release -Prelease.customUsername=$GIT_USERNAME -Prelease.customPassword=$GIT_PASSWORD
    localOnly = false // connect to remote

    ignoreUncommittedChanges = false // should uncommitted changes force version bump

    useHighestVersion = false // Defaults as false, setting to true will find the highest visible version in the commit tree

    sanitizeVersion = true // should created version be sanitized, true by default

    tag {
        prefix = 'v' // prefix to be used, 'release' by default
        branchPrefix = [ // set different prefix per branch
                         'legacy/.*' : 'legacy'
        ]

        versionSeparator = '' // separator between prefix and version number, '-' by default
        //serialize = { tag, version -> ... } // creates tag name from raw version
        //deserialize = { tag, position, tagName -> ... } // reads raw version from tag
        //initialVersion = { tag, position -> ... } // returns initial version if none found, 0.1.0 by default
    }

    nextVersion {
        suffix = 'alpha' // tag suffix
        separator = '-' // separator between version and suffix
        //serializer = { nextVersionConfig, version -> ... } // append suffix to version tag
        //deserializer = { nextVersionConfig, position -> ... } // strip suffix off version tag
    }

    //versionCreator { version, position -> ... } // creates version visible for Gradle from raw version and current position in scm
    versionCreator 'versionWithBranch' // use one of predefined version creators
    branchVersionCreator = [ // use different creator per branch
                             'feature/.*': 'versionWithBranch',
                             'bug/.*': 'versionWithBranch',
                             'refactor/.*': 'versionWithBranch',
                             'chore/.*': 'versionWithBranch'

    ]

    //versionIncrementer {context, config -> ...} // closure that increments a version from the raw version, current position in scm and config
    versionIncrementer 'incrementPatch' // use one of predefined version incrementing rules
    branchVersionIncrementer = [ // use different incrementer per branch
                                 'feature/.*': 'incrementMinor',
                                 'bug/.*': 'incrementPatch',
                                 'refactor/.*': 'incrementPatch',
                                 'chore/.*': 'incrementPatch'
    ]

    //createReleaseCommit true // should create empty commit to annotate release in commit history, false by default
    //releaseCommitMessage { version, position -> ... } // custom commit message if commits are created

    checks {
        uncommittedChanges = true // permanently disable uncommitted changes check
        aheadOfRemote = false // permanently disable ahead of remote check
        snapshotDependencies = false // check that there is no SNAPSHOT dependencies (for example when doing a stable release)
    }

    hooks {
        pre 'fileUpdate', [file: 'README.md', pattern: {v,p -> ":version: (.*)"}, replacement: {v, p -> ":version: $v"}]
        pre 'commit'
    }
}
