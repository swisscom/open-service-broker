apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

bootJar.enabled = false
jar.enabled = true

ext['tomcat.version'] = '9.0.11'
ext['flyway.version'] = '5.1.4'
ext['groovy.version'] = '2.5.2'

processResources {
    filesMatching(["*.properties", "**/application-info.yml"]) {
        expand(project.properties)
    }
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
}

dependencies {
    compile project(':model')
    compile project(':client')

    compile('org.springframework.boot:spring-boot-starter-log4j2:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-web:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-autoconfigure:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-data-jpa:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-jdbc:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-security:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-actuator:2.1.1.RELEASE')
    compile('org.springframework.boot:spring-boot-devtools:2.1.1.RELEASE')
    compile('org.springframework.cloud:spring-cloud-open-service-broker-core:2.1.1.RELEASE')
    compile('org.springframework.cloud:spring-cloud-open-service-broker:2.1.1.RELEASE')
    compile('org.springframework.cloud:spring-cloud-starter-open-service-broker-webmvc:2.1.0.RELEASE')
    compile('org.springframework.cloud:spring-cloud-starter-config:2.1.0.RELEASE')
    compile('org.springframework.cloud:spring-cloud-cloudfoundry-connector:2.0.4.RELEASE')
    compile('org.springframework:spring-context-support:5.1.3.RELEASE')
    compile('org.influxdb:influxdb-java:2.7')
    compile('io.micrometer:micrometer-registry-influx:1.0.4')
    compile('org.codehaus.groovy:groovy-all:2.5.2')
    compile('org.codehaus.groovy:groovy-dateutil:2.5.2')
    compile('org.codehaus.gpars:gpars:1.2.1')
    compile('com.google.guava:guava:26.0-jre')
    compile('org.quartz-scheduler:quartz:2.3.0')
    compile('org.springframework.retry:spring-retry:1.2.4.RELEASE')
    compile('joda-time:joda-time:2.10')
    compile('org.flywaydb:flyway-core:5.1.4')
    compile('com.google.code.gson:gson:2.8.5')
    compile('org.apache.httpcomponents:httpclient:4.5.6')
    compile('commons-lang:commons-lang:2.6')
    compile('org.bouncycastle:bcprov-jdk16:1.46')
    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('io.springfox:springfox-swagger-ui:2.9.2')
    compile('com.networknt:json-schema-validator:0.1.21')
    compile('io.swagger.parser.v3:swagger-parser:2.0.2')
    compile('org.passay:passay:1.3.1')

    compile('org.springframework.credhub:spring-credhub-starter:2.0.0.RELEASE')
    compile("org.springframework.boot:spring-boot-starter-webflux:2.1.1.RELEASE")
    compile("org.springframework.security:spring-security-config:5.1.3.RELEASE")
    compile("org.springframework.security:spring-security-oauth2-client:5.1.3.RELEASE")

    compile('org.slf4j:slf4j-api:1.7.25')
    compile('org.apache.logging.log4j:log4j-to-slf4j:2.7')
    compile('log4j:log4j:1.2.17')

    // The dependency to tomcat 7.x can be removed as soon as deployment onto Tomcat is not required any more.
    compile('org.apache.tomcat:tomcat-juli:9.0.11')

    runtime('mysql:mysql-connector-java:8.0.12')
    runtime('javax.el:javax.el-api:3.0.0')
    runtime('org.glassfish:javax.el:3.0.0')

    if (project.hasProperty('tomcat')) {
        // Used for production environment
        System.out.println('tomcat')
        providedRuntime('org.springframework.boot:spring-boot-starter-tomcat:2.1.1.RELEASE')
    } else {
        System.out.println('standalone')
        runtime('org.springframework.boot:spring-boot-starter-tomcat:2.1.1.RELEASE')
    }

    testCompile('org.codehaus.groovy:groovy:2.5.2')
    testCompile('org.codehaus.groovy:groovy-test:2.5.2')

    testCompile('log4j:log4j:1.2.17')
    testCompile('org.springframework.boot:spring-boot-starter-test:2.1.1.RELEASE')
    testCompile('org.spockframework:spock-core:1.2-groovy-2.5')
    testCompile('org.spockframework:spock-spring:1.2-groovy-2.5')
    testCompile('cglib:cglib-nodep:3.2.7')
}

// Add integration/functional test source sets
sourceSets {
    integrationTest { sourceSet ->
        ["java", "groovy", "scala", "resources"].each {
            if (!sourceSet.hasProperty(it)) return
            sourceSet."$it".srcDir file("src/integration-test/${it}")
        }
    }
    functionalTest { sourceSet ->
        ["java", "groovy", "scala", "resources"].each {
            if (!sourceSet.hasProperty(it)) return
            sourceSet."$it".srcDir file("src/functional-test/${it}")
        }
    }
}

// Setup dependencies for integration testing
dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime

    functionalTestCompile sourceSets.main.output
    functionalTestCompile sourceSets.test.output
    functionalTestCompile sourceSets.integrationTest.output
    functionalTestCompile configurations.testCompile
    functionalTestRuntime configurations.testRuntime
}

// Define integration test task
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// Define function test task
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task buildCloudFoundryManifest() {
    String fileContent = new File("$projectDir/../manifest-template.yml").text
    fileContent = fileContent.replaceAll("%releasePackage%", "broker-$version")
    project.file("$projectDir/build/libs").mkdirs()
    new File("$projectDir/build/libs/manifest.yml").text = fileContent
}

configurations {
    testArtifacts.extendsFrom testRuntime
    testCompile.exclude group: "ch.qos.logback"
}

task testJar(type: Jar) {
    classifier "test"
    from sourceSets.integrationTest.output + sourceSets.functionalTest.output
}

artifacts {
    testArtifacts testJar
}

// Make sure 'check' task calls integration test
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Make sure 'check' task calls functional test
check.dependsOn functionalTest
functionalTest.mustRunAfter integrationTest

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}