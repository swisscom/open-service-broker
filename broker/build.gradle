apply plugin: "groovy"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

apply from: "$rootDir/gradle/functional-testing.gradle"

jar {
    enabled = true
}

bootJar {
    enabled = true
    mainClassName = 'com.swisscom.cloud.sb.broker.ServiceBroker'
    baseName = "broker"
}

bootRun {
    main = "com.swisscom.cloud.sb.broker.ServiceBroker"
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    all*.exclude group: 'ch.qos.logback', module: 'logback-classic'

    testCompile.exclude group: "ch.qos.logback"
    testArtifacts.extendsFrom testRuntime
}

dependencies {
    compile project(':model')
    compile project(':client')
    compile project(':broker:core')

    compile libs.spring_boot_starter_log4j2
    compile libs.spring_boot_starter_autoconfigure
    compile libs.spring_boot_starter_data_jpa
    compile libs.spring_boot_starter_jdbc
    compile libs.spring_boot_starter_security
    compile libs.spring_boot_starter_actuator
    compile libs.spring_boot_starter_devtools
    compile libs.spring_boot_starter_webflux // required by credhub starter (see broker-core)

    compile libs.spring_cloud_open_service_broker
    compile libs.spring_cloud_starter_open_service_broker_webmvc
    compile libs.spring_cloud_starter_config
    compile libs.spring_cloud_cloudfoundry_connector

    compile libs.spring_context_support
    compile libs.spring_security_config
    compile libs.spring_security_oauth2_client

    compile libs.groovy
    compile libs.groovy_dateutil

    compile libs.slf4j
    compile libs.log4j
    compile libs.log4j_to_slf4j
    compile libs.tomcat_juli

    compile libs.influxdb_java

    runtime libs.mysql_connector_java
    runtime libs.javax_el_api
    runtime libs.javax_el

    testCompile project(path:':broker:core', configuration:'testArtifacts')
    testCompile libs.groovy
    testCompile libs.groovy_test
    testCompile libs.junit
    testCompile libs.spock
    testCompile libs.spock_spring
    testCompile libs.cglib
    testCompile libs.groovy_test
    testCompile libs.spring_boot_starter_test
}

ext {
    osbversion = version
}

processResources {
    filesMatching(["*.properties", "**/application-info.yml"]) {
        expand(project.properties)
    }
}

task testAllJar(type: Jar, dependsOn: ":broker:testJar") {
    from new File(project(':broker').getBuildDir().toString() + "/classes/groovy/test")
    from new File(project(':broker').getBuildDir().toString() + "/classes/groovy/functionalTest")
    from new File(project(':broker').getBuildDir().toString() + "/classes/groovy/integrationTest")
    from new File(project(':client').getBuildDir().toString() + "/classes/groovy/test")
    classifier "test"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task javaDocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier "javadoc"
}

task buildCloudFoundryManifest() {
    String fileContent = new File("$projectDir/../manifest-template.yml").text
    fileContent = fileContent.replaceAll("%releasePackage%", "broker-$version")
    project.file("$projectDir/build/libs").mkdirs()
    new File("$projectDir/build/libs/manifest.yml").text = fileContent
}

/**
 * Escape the placeholders in the application-secrets.yml to prevent Gradle's template expanding to throw
 * `MissingPropertyException` because these placeholders are later used from the OSB to parametrized provisioning
 * templates.
 */
processResources {
    filesMatching("**/application-secrets.yml") { matchedFile ->
        filter { line ->
            line.replace('${', '\\${').replace('$(', '\\$(').replace('$\"', '\\$\"')
        }
    }
}